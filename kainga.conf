# -*- mode: toml -*-

#     Kainga-conf the config to get the kainga (home) you want
#     Copyright (C) 2020 Shaun Alexander

#     This program is free software: you can redistribute it and/or modify
#     it under the terms of the GNU General Public License as published by
#     the Free Software Foundation, either version 3 of the License, or
#     (at your option) any later version.

#     This program is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.

#     You should have received a copy of the GNU General Public License
#     along with this program.  If not, see <https://www.gnu.org/licenses/>.

# Kianga config file

# Refresh repositories and upgrade existing packages
[packages-refresh]
    [[packages-refresh.scripts]]
        root = true
        prompt = true
        script = ["bin/package-update"]


# Go through packages that have dependencies individually so
# the dependencies can run as soon as possible
[packages-alttab]
    pre-reqs = ["packages-refresh.scripts"]
    [[packages-alttab.scripts]]
        root = true
        prompt = true
        script = ["bin/packages", "alttab"]

[packages-curl]
    pre-reqs = ["packages-refresh.scripts"]
    [[packages-curl.scripts]]
        root = true
        prompt = true
        script = ["bin/packages", "curl"]

[packages-emacs]
    pre-reqs = ["packages-refresh.scripts"]
    [[packages-emacs.scripts]]
        root = true
        prompt = true
        script = ["bin/packages", "emacs"]
        
[packages-git]
    pre-reqs = ["packages-refresh.scripts"]
    [[packages-git.scripts]]
        root = true
        prompt = true
        script = ["bin/packages", "git"]
        
[packages-inotify]
    pre-reqs = ["packages-refresh.scripts"]
    [[packages-inotify.scripts]]
        root = true
        prompt = true
        script = ["bin/packages", "inotify-tools"]

[packages-python3]
    pre-reqs = ["packages-refresh.scripts"]
    [[packages-python3.scripts]]
        root = true
        prompt = true
        script = ["bin/packages", "python3"]

[packages-pip]
    pre-reqs = ["packages-refresh.scripts"]
    [[packages-pip.scripts]]
        root = true
        prompt = true
        script = ["bin/packages", "python3-pip"]

[packages-stow]
    pre-reqs = ["packages-refresh.scripts"]
    [[packages-stow.scripts]]
        root = true
        prompt = true
        script = ["bin/packages", "stow"]

[packages-wget]
    pre-reqs = ["packages-refresh.scripts"]
    [[packages-wget.scripts]]
        root = true
        prompt = true
        script = ["bin/packages", "wget"]

[packages-xwit]
    pre-reqs = ["packages-refresh.scripts"]
    [[packages-xwit.scripts]]
        root = true
        prompt = true
        script = ["bin/packages", "xwit"]

# All other packages that aren't parents can be run now
[packages-others]
    pre-reqs = ["packages-refresh.scripts"]
    [[packages-others.scripts]]
        root = true
        prompt = true
        script = ['xargs', '-r', '-a', 'bin/other-packages', 'bin/packages']

############################################################
########
###
# End of Package updates

# Instal source code pro for spacemacs
[emacs-font]
    pre-reqs = ["packages-wget.scripts"] 
    [[emacs-font.scripts]]
        root = true
        prompt = false
        script = ["bin/get-install-spacemacs-font"]

# launch alttab for navigating between Xwindows
[alttab-launch]
    pre-reqs = ["packages-alttab.scripts"] 
    [[alttab-launch.scripts]]
        prompt = false
        no_wait = true
        script = ["bin/alttab_start"]

# Potentially should do this but haven't convinced myself its required yet
# [setup-user]
# if user doesn't exist then do it.

[setup-supervd]
    pre-reqs = ["packages-pip.scripts"] 
    [[setup-supervd.scripts]]
        root = true
        prompt = true
        script = ["sudo", "pip3", "install", "-U", "supervisor"]

# take all the scripts from bin and add them to the home folder
[my-bin]
    [[my-bin.scripts]]
        prompt = false
        priority = 0
        script = ["bin/ln-s-dir", "~/bin/my-bin", "./bin"]

# Pull my dotfiles repo then use GNU stow to unpack them to the ~ directory
[stow-dotties]
    pre-reqs = ["packages-git.scripts", "packages-stow.scripts"]
    [[stow-dotties.scripts]]
        prompt = false
        priority = 0
        script = ["bin/gcop", "https://github.com/sierra-alpha/dotfiles.git", "~/dotfiles"]
    [[stow-dotties.scripts]]
        prompt = true
        priority = 1
        script = ["bin/stow-dotties"]
    [[stow-dotties.scripts]]
        # Not sure if this needs prompt
        prompt = true
        priority = 2
        script = ["bin/append-to-file", "~/.bashrc", "bin/bash/.add-to-bashrc"]


# Create a SSH key if it doesn't exist and then upload it to GH if GH doesn't
# already have it
[ssh-key-to-gh]
    pre-reqs = ["stow-dotties.scripts"]
    [[ssh-key-to-gh.scripts]]
        prompt = true
        priority = 0
        script = ["bin/ssh-key-setup"]
    [[ssh-key-to-gh.scripts]]
        prompt = true
        priority = 1
        script = ["/bin/bash", "-c", 'bin/ghak sierra-alpha "$(whoami)@$(hostname)" ~/.ssh/id_rsa.pub']


# Pull any private repos, needs to have ssh key added first, these repos aren't
# actually private any more but nothing depends on them so it doesn't really
# matter when they run 
[other-repos]
    pre-reqs = ["ssh-key-to-gh.scripts"] 
    [[otehr-repos.scripts]]
        prompt = true
        priority = 0
        script = ["bin/gcop", "https://github.com/sierra-alpha/matapihi.git", "~/dev/matapihi/matapihi"]
    [[other-repos.scripts]]
        prompt = true
        priority = 0
        script = ["bin/gcop", "https://github.com/sierra-alpha/wakahiki.git", "~/dev/wakahiki/wakahiki"]


# launch the emacs daemon so we can enter emacs fast once the config has
# finished loading
[emacs-daemon]
    pre-reqs = ["packages-emacs.scripts", "ssh-key-to-gh.scripts", "emacs-font.scripts"]
    [[emacs-daemon.scripts]]
        prompt = false
        priority = 0
        script = ["bin/idemp_emacs_srv", "--chdir", "~/"] 


# Install gitwatch for keeping an eye on the config repos to keep all instances
# of Kainga as fresh as possible
[gitwatch-install]
    pre-reqs = ["ssh-key-to-gh.scripts", "packages-inotify.scripts"]
    [[gitwatch-install.scripts]]
        prompt = true
        priority = 0
        script = ["bin/gcop", "https://github.com/gitwatch/gitwatch.git", "~/src/gitwatch"] 
    [[gitwatch-install.scripts]]
        priority = 1
        prompt = false
        script = ["install", "-C", "-b", "-D", "~/src/gitwatch/gitwatch.sh", "~/bin/gitwatch"]


# Run supervisord and pickup the config from the dotfiles repo
[configure-supervd]
    pre-reqs = ["gitwatch-install.scripts", "setup-supervd.scripts"]
    [[configure-supervd.scripts]]
        prompt = false 
        priority = 0
        script = ["bin/restart-supervisor", "-c", "~/.supervisord/supervisord.conf"]

