#!/bin/bash

#     Kainga-conf the config to get the kainga (home) you want
#     Copyright (C) 2020 Shaun Alexander

#     This program is free software: you can redistribute it and/or modify
#     it under the terms of the GNU General Public License as published by
#     the Free Software Foundation, either version 3 of the License, or
#     (at your option) any later version.

#     This program is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.

#     You should have received a copy of the GNU General Public License
#     along with this program.  If not, see <https://www.gnu.org/licenses/>.


# ghak = git hub add key (public)
# uses github api to add a public key to GH

function welcome () {
    echo "Welcome to the GitHub public key adder"
    echo -e "This will add a new public key to GH for you"
}

function help_me() {
    echo "Usage: ghak [options]"
    echo
    echo "-h Prints this help messsage and exits"
    echo "-f <public key file> The location of public key file to upload"
    echo "-n <key name> The name for the key on GitHub, will default to user@hostname"
    echo "-s Skips if the any key on the machine is authenticated with GH already"
    echo "-u <username> The GitHub account username to upload the key too"
}

function github_add_key() {
    local user skip keyname pubkey OPTIND=1

    while getopts u:n:f:sh option
    do
        case "${option}"
        in
            h)
                welcome
                help_me
                exit;;
            f) pubkey=${OPTARG};;
            n) keyname=${OPTARG};;
            s) skip=true;;
            u) user=${OPTARG};;
        esac
    done

    # If the skip flag is set then check if any SSH key is already
    # authenticated for this users (local user not GH user)
    # and if so exit
    if [ ! -z "$skip" ]
    then
        # How to see if any of our keys are already authenticated
        if ssh -T git@github.com 2>&1 | grep "successfully authenticated"
        then
            exit
        fi
    fi

    # Prompt or set defaults for required
    if [ -z "$user" ]
    then
        echo "Enter the GitHub account username to upload the key to:"
        read user
    fi

    if [ -z "$keyname" ]
    then
        keyname="$(whoami)@$(hostname)"
    fi

    if [ -z "$pubkey" ]
    then
       echo "Enter the location of the public key to upload"
       read pubkey
    fi

    # https://docs.github.com/en/free-pro-team@latest/github/authenticating-to-github/testing-your-ssh-connection
    # Docs say checking for your user name in the response to ssh -T git@github.com
    # is how to test for ssh key access to GH, so we do that and then upload our key
    # on failure. Note - the ssh connection always fails, so we need to redirect stderr
    while ! ssh -T git@github.com 2>&1 | grep " $user!"
    do
        echo Trying to set up your ssh key to Git Hub,
        echo requires a Personal access token.
        echo Enter q to quit or any other key to continue.
        read prompt
        if [[ "$prompt" == "q" ]]
        then

            # Unset SSH Default and set HTTP default for pull
            git config --global --unset-all url."git@github.com:".insteadof
            git config --global --unset-all url."git://".insteadof
            git config --global url."https://github.com/".insteadof "git@github.com:"
            git config --global url."https://".insteadOf "git://"
            echo "Defaulting to HTTPS for github push and pulls"
            exit
        fi
        curl -u "$user" -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/user/keys \
            -d '{"title":"'"$title"'", "key":"'"$(cat "$pubkey")"'"}'

    done

    # If we get here then it means that SSH is successful so
    # unset HTTPS default and set SSH as default
    git config --global --unset-all url."https://github.com/".insteadof
    git config --global --unset-all url."https://".insteadof
    git config --global url."git@github.com:".insteadof "https://github.com/"
    git config --global url."git://".insteadOf "https://"
}

github_add_key "$@"
